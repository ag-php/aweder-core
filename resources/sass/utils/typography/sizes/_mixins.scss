/* FONT SIZE MIXINS ============================================================================= */

$rem-base-font: 16px !default;

// This mixing returns a rem and px value for a given property
@mixin rem2px($property, $sizeValue: 1.6) {
  #{$property}: ($sizeValue * 10) + px;
  #{$property}: $sizeValue + rem;
}

@function lineHeightRule($percentage) {
  @return $percentage / 100;
}

@mixin lineHeightRule($percentage){
  line-height: lineHeightRule($percentage);
}

@mixin fontSizes() {
  $sizes: map-keys($breakpoints);
  @each $name, $fontStyle in $fontStyles {
    $golden-rule: map_get($fontStyles, golden-rule);
    @if $name != 'golden-rule' {
      .#{$name} {
        @each $size, $style in $fontStyle {
          $fontBreakpoints: map-keys($fontStyle);
          @if $fontBreakpoints = $sizes {
            @if $size == 'xl' {
              @each $selector, $type in $style {
                $font-size: map-get($style, 'font-size');
                $line-height-rule: map-get($style, 'line-height-rule');
                $line-height-px: map-get($style, 'line-height-px');
                @if $font-size != null {
                  @include rem2px(font-size, $type);
                }
                @if $font-size != null {
                  @include rem2px(font-size, $type);
                }
                @if $line-height-rule != null {
                  @include lineHeightRule($line-height-rule);
                } @else {
                  @include lineHeightRule($golden-rule);
                }
              }
            } @else {
              @include mq($size) {
                @each $selector, $type in $style {
                  $font-size: map-get($style, 'font-size');
                  $line-height-rule: map-get($style, 'line-height-rule');
                  $line-height-px: map-get($style, 'line-height-px');
                  @if $font-size != null {
                    @include rem2px(font-size, $type);
                  }
                  @if $line-height-rule != null {
                    @include lineHeightRule($line-height-rule);
                  } @else {
                    @include lineHeightRule($golden-rule);
                  }
                }
              }
            }
          }
        }
      }
      @include placeholder($name) {
        @each $size, $style in $fontStyle {
          $fontBreakpoints: map-keys($fontStyle);
          @if $fontBreakpoints = $sizes {
            @if $size == 'xl' {
              @each $selector, $type in $style {
                $font-size: map-get($style, 'font-size');
                $line-height-rule: map-get($style, 'line-height-rule');
                $line-height-px: map-get($style, 'line-height-px');
                @if $font-size != null {
                  @include rem2px(font-size, $type);
                }
                @if $line-height-rule != null {
                  @include lineHeightRule($line-height-rule);
                } @else {
                  @include lineHeightRule($golden-rule);
                }
              }
            } @else {
              @include mq($size) {
                @each $selector, $type in $style {
                  $font-size: map-get($style, 'font-size');
                  $line-height-rule: map-get($style, 'line-height-rule');
                  $line-height-px: map-get($style, 'line-height-px');
                  @if $font-size != null {
                    @include rem2px(font-size, $type);
                  }
                  @if $line-height-rule != null {
                    @include lineHeightRule($line-height-rule);
                  } @else {
                    @include lineHeightRule($golden-rule);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}